{"version":3,"sources":["images/icons/science (3).png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","backgroundSize","cardContent","flexGrow","footer","paddingLeft","backdrop","zIndex","drawer","root","justifyContent","flexWrap","margin","Album","classes","useState","data","setData","open","setClose","searchQuery","setSearchQuery","React","openModal","setOpen","scroll","setScroll","dialogData","setDialogData","handleClickOpen","scrollType","event","preventDefault","stopPropagation","handleClose","q","a","search","request","fetch","json","result","records","useEffect","fetchData","descriptionElementRef","useRef","descriptionElement","current","focus","Fragment","CssBaseline","AppBar","position","style","Toolbar","Avatar","src","IconImage","className","rounded","noWrap","Container","maxWidth","component","gutterBottom","TextField","id","label","fullWidth","onKeyUp","e","target","value","Grid","container","key","length","map","item","_id","xs","sm","md","Weblink","indexOf","textDecoration","Card","CardMedia","image","title","CardContent","substring","Box","fontStyle","split","c","Chip","size","Divider","CardActions","Button","onClick","Backdrop","CircularProgress","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","ref","tabIndex","DialogActions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ebba444.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/science (3).a0a6971c.png\";","import React, { useEffect, useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconImage from \"./images/icons/science (3).png\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport { Box, CircularProgress, Divider, Chip } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"#\">\r\n        Sumit Jangir\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\", // 16:9\r\n    backgroundSize: \"90% 90%\",\r\n    backgroundColor: \"#fafafa\",\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n  paddingLeft: {\r\n    paddingLeft: \"5px\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Album() {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState([]);\r\n  const [open, setClose] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [openModal, setOpen] = React.useState(false);\r\n  const [scroll, setScroll] = React.useState(\"paper\");\r\n  const [dialogData, setDialogData] = useState({});\r\n\r\n  const handleClickOpen = (scrollType, data) => (event) => {\r\n    setOpen(true);\r\n    setScroll(scrollType);\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setDialogData(data);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  async function fetchData(q) {\r\n    let search = q ? `&q=${q}` : \"\";\r\n\r\n    let request = fetch(\r\n      \"https://www.data.qld.gov.au/api/3/action/datastore_search?resource_id=8b9178e0-2995-42ad-8e55-37c15b4435a3\" +\r\n        search\r\n    );\r\n    let data = await (await request).json();\r\n    setData(data.result.records);\r\n    setClose(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData(searchQuery);\r\n  }, [searchQuery]);\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (openModal) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [openModal]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\" style={{ background: \"#f44336\" }}>\r\n        <Toolbar>\r\n          <Avatar\r\n            variant=\"rounded\"\r\n            src={IconImage}\r\n            className={classes.rounded}\r\n          ></Avatar>\r\n          <Typography\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.paddingLeft}\r\n          >\r\n            Science Directory\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        {/* Hero unit */}\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography\r\n              component=\"h1\"\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              color=\"textPrimary\"\r\n              gutterBottom\r\n            >\r\n              Search and Learn\r\n            </Typography>\r\n            <TextField\r\n              id=\"search-text\"\r\n              label=\"Search test here...\"\r\n              variant=\"outlined\"\r\n              className=\"\"\r\n              fullWidth\r\n              onKeyUp={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4} key=\"1\">\r\n            {data.length > 0 ? (\r\n              data.map((card) => (\r\n                <Grid item key={card._id} xs={12} sm={6} md={4}>\r\n                  <a\r\n                    href={\r\n                      card.Weblink && card.Weblink.indexOf(\"http\") > -1\r\n                        ? card.Weblink\r\n                        : \"http\" + card.Weblink\r\n                    }\r\n                    target=\"_blank\"\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    <Card className={classes.card}>\r\n                      <CardMedia\r\n                        className={classes.cardMedia}\r\n                        image={card[\"logo_clean\"]}\r\n                        title=\"Image title\"\r\n                      />\r\n                      <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                          {card[\"Centre name\"]}{\" \"}\r\n                          {card[\"Abbreviation\"]\r\n                            ? \"(\" + card[\"Abbreviation\"] + \")\"\r\n                            : \"\"}\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                          {card[\"Overview\"].length > 100\r\n                            ? card[\"Overview\"].substring(0, 100) + \"...\"\r\n                            : card[\"Overview\"]}\r\n                        </Typography>\r\n                        <b>Address</b>{\" \"}\r\n                        <Box fontStyle=\"oblique\">{card[\"Address\"]}</Box>\r\n                      </CardContent>\r\n                      <div className={classes.root}>\r\n                        {card[\"Sectors\"].split(\";\").map((c) => (\r\n                          <Chip\r\n                            size=\"small\"\r\n                            color=\"secondary\"\r\n                            variant=\"outlined\"\r\n                            label={c}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                      <Divider />\r\n                      <CardActions>\r\n                        <Button\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          onClick={handleClickOpen(\"paper\", card)}\r\n                        >\r\n                          View more details\r\n                        </Button>\r\n                      </CardActions>\r\n                    </Card>\r\n                  </a>\r\n                </Grid>\r\n              ))\r\n            ) : (\r\n              <Backdrop className={classes.backdrop} open={open}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            )}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n      {/* Footer */}\r\n      <footer className={classes.footer}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Help Links\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          align=\"center\"\r\n          color=\"textSecondary\"\r\n          component=\"p\"\r\n        >\r\n          Source of data:\r\n          <Button\r\n            target=\"_blank\"\r\n            href=\"https://www.data.qld.gov.au/\"\r\n            color=\"primary\"\r\n          >\r\n            Queensland Government\r\n          </Button>\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          align=\"center\"\r\n          color=\"textSecondary\"\r\n          component=\"p\"\r\n        >\r\n          Mentor:\r\n          <a target=\"_blank\" href=\"#\"></a>\r\n          <Button target=\"_blank\" href=\"#u/\" color=\"primary\">\r\n            Mr. Matti richardson\r\n          </Button>\r\n        </Typography>\r\n        <Copyright />\r\n      </footer>\r\n      {/* End footer */}\r\n\r\n      <Dialog\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        scroll={scroll}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"scroll-dialog-title\">\r\n          {dialogData[\"Centre name\"]}{\" \"}\r\n          {dialogData[\"Abbreviation\"]\r\n            ? \"(\" + dialogData[\"Abbreviation\"] + \")\"\r\n            : \"\"}\r\n        </DialogTitle>\r\n        <DialogContent dividers={scroll === \"paper\"}>\r\n          <DialogContentText\r\n            id=\"scroll-dialog-description\"\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}\r\n          >\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Parent organisation</Box>\r\n              {dialogData[\"Parent organisation\"]}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Web link</Box>\r\n              <Button\r\n                target=\"_blank\"\r\n                href={dialogData[\"Weblink\"]}\r\n                color=\"primary\"\r\n              >\r\n                {dialogData[\"Weblink\"]}\r\n              </Button>\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Overview</Box>\r\n              {dialogData[\"Overview\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Centre summary</Box>\r\n              {dialogData[\"Centre summary\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Sectors</Box>\r\n              {dialogData[\"Sectors\"] &&\r\n                dialogData[\"Sectors\"]\r\n                  .split(\";\")\r\n                  .map((c) => (\r\n                    <Chip\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      variant=\"outlined\"\r\n                      label={c}\r\n                    />\r\n                  ))}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Strengths and capabilities</Box>\r\n              {dialogData[\"Strengths and capabilities\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Facilities and major equipment</Box>\r\n              {dialogData[\"Facilities and major equipment\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Research staff</Box>\r\n              {dialogData[\"Research staff\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Organisation type</Box>\r\n              {dialogData[\"Organisation type\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Primary centre</Box>\r\n              {dialogData[\"Primary centre\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Address</Box>\r\n              {dialogData[\"Address\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Latitude and Longitude</Box>\r\n              {dialogData[\"Latitude\"] || \"\"}\r\n              {\",\"}\r\n              {dialogData[\"Longitude\"] || \"\"}\r\n            </Typography>\r\n            <Typography component=\"div\" variant=\"body1\">\r\n              <Box color=\"warning.main\">Centre achievements</Box>\r\n              {dialogData[\"Centre achievements\"] || \"\"}\r\n            </Typography>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
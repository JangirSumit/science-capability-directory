{"version":3,"sources":["images/icons/science (3).png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","backgroundSize","cardContent","flexGrow","footer","paddingLeft","count","cards","data","map","a","itemId","Album","classes","Fragment","CssBaseline","AppBar","position","style","Toolbar","Avatar","src","IconImage","className","rounded","noWrap","Container","maxWidth","component","gutterBottom","TextField","id","label","fullWidth","Grid","container","item","key","xs","sm","md","Card","CardMedia","image","title","CardContent","length","substring","Box","fontStyle","CardActions","Button","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"47q9BAAAA,EAAOC,QAAU,IAA0B,yC,oTCoB3C,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,KAA3B,gBAEQ,KACP,IAAIC,MAAOC,cACX,KAKP,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACXC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,EAAG,EAAG,IAE/BO,YAAa,CACXC,UAAWX,EAAMG,QAAQ,IAE3BS,SAAU,CACRC,WAAYb,EAAMG,QAAQ,GAC1BW,cAAed,EAAMG,QAAQ,IAE/BY,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTN,WAAY,SACZO,eAAgB,UAChBf,gBAAiB,WAEnBgB,YAAa,CACXC,SAAU,GAEZC,OAAQ,CACNlB,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,IAEzBqB,YAAa,CACXA,YAAa,WAIbC,EAAQ,EACNC,EAAQC,EAAKC,KAAI,SAACC,GAEtB,OADAA,EAAEC,SAAWL,EACNI,KAGM,SAASE,IACtB,IAAMC,EAAUlC,IAEhB,OACE,kBAAC,IAAMmC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,WAAWC,MAAO,CAAE9B,WAAY,YAC/C,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEhD,QAAQ,UACRiD,IAAKC,IACLC,UAAWV,EAAQW,UAErB,kBAACrD,EAAA,EAAD,CACEC,QAAQ,KACRC,MAAM,UACNoD,QAAM,EACNF,UAAWV,EAAQR,aAJrB,kCAUJ,8BAEE,yBAAKkB,UAAWV,EAAQ5B,aACtB,kBAACyC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACxD,EAAA,EAAD,CACEyD,UAAU,KACVxD,QAAQ,KACRE,MAAM,SACND,MAAM,cACNwD,cAAY,GALd,oBASA,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHC,MAAM,sBACN5D,QAAQ,WACRmD,UAAU,GACVU,WAAS,MAkBf,kBAACP,EAAA,EAAD,CAAWH,UAAWV,EAAQpB,SAAUkC,SAAS,MAE/C,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACnD,QAAS,GACtBuB,EAAME,KAAI,SAACb,GAAD,OACT,kBAACsC,EAAA,EAAD,CAAME,MAAI,EAACC,IAAKzC,EAAKe,OAAQ2B,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC9C,kBAACC,EAAA,EAAD,CAAMlB,UAAWV,EAAQjB,MACvB,kBAAC8C,EAAA,EAAD,CACEnB,UAAWV,EAAQb,UACnB2C,MAAO/C,EAAI,WACXgD,MAAM,gBAER,kBAACC,EAAA,EAAD,CAAatB,UAAWV,EAAQX,aAC9B,kBAAC/B,EAAA,EAAD,CAAY0D,cAAY,EAACzD,QAAQ,KAAKwD,UAAU,MAC7ChC,EAAK,eAAgB,IACrBA,EAAI,aACD,IAAMA,EAAI,aAAmB,IAC7B,IAEN,kBAACzB,EAAA,EAAD,CAAYE,MAAM,iBACfuB,EAAI,SAAakD,OAAS,IACvBlD,EAAI,SAAamD,UAAU,EAAG,KAAO,MACrCnD,EAAI,UAVZ,YAYW,kBAACoD,EAAA,EAAD,CAAKC,UAAU,WAAWrD,EAAI,UAEzC,kBAACsD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQ/E,MAAM,WAA3B,8BAWd,4BAAQkD,UAAWV,EAAQT,QACzB,kBAACjC,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,SAASuD,cAAY,GAApD,UAGA,kBAAC1D,EAAA,EAAD,CACEC,QAAQ,YACRE,MAAM,SACND,MAAM,gBACNuD,UAAU,KAJZ,gDAQA,kBAAC1D,EAAD,QC5KYmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9cff7a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/science (3).a0a6971c.png\";","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport data from \"./data/data.json\";\nimport IconImage from \"./images/icons/science (3).png\";\nimport { Box } from \"@material-ui/core\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"#\">\n        Sumit Jangir\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\", // 16:9\n    backgroundSize: \"90% 90%\",\n    backgroundColor: \"#fafafa\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  paddingLeft: {\n    paddingLeft: \"5px\",\n  },\n}));\n\nlet count = 0;\nconst cards = data.map((a) => {\n  a.itemId = ++count;\n  return a;\n});\n\nexport default function Album() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\" style={{ background: \"#f44336\" }}>\n        <Toolbar>\n          <Avatar\n            variant=\"rounded\"\n            src={IconImage}\n            className={classes.rounded}\n          ></Avatar>\n          <Typography\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.paddingLeft}\n          >\n            Science Capability Directory\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h4\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              Search and Learn\n            </Typography>\n            <TextField\n              id=\"search-text\"\n              label=\"Search test here...\"\n              variant=\"outlined\"\n              className=\"\"\n              fullWidth\n            />\n            {/* <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    Main call to action\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    Secondary action\n                  </Button>\n                </Grid>\n              </Grid>\n            </div> */}\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card.itemId} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image={card[\"logo_clean\"]}\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                      {card[\"Centre name\"]}{\" \"}\n                      {card[\"Abbreviation\"]\n                        ? \"(\" + card[\"Abbreviation\"] + \")\"\n                        : \"\"}\n                    </Typography>\n                    <Typography color=\"textSecondary\">\n                      {card[\"Overview\"].length > 100\n                        ? card[\"Overview\"].substring(0, 100) + \"...\"\n                        : card[\"Overview\"]}\n                    </Typography>\n                    Address: <Box fontStyle=\"oblique\">{card[\"Address\"]}</Box>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      View more details\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Something here to give the footer a purpose!\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}